#pragma once
#include "min_cost_flow.cpp"
using namespace dalt;
using real = double;


void SolveOne(int test_id, IStream &in, OStream &out) {
  int N, M;
  in >> N >> M;
  Vec<int> need(N);
  in >> need;
  using namespace graph;
  using E = CostFlowBaseEdge<i64>;
  Graph<E> g(N + 2);
  var id_src = [&]() {return N + 1;};
  var id_dst = [&]() {return N;};
  i64 inf = 1e18;
  AddCostFlowEdge(g, id_src(), 0, inf, 0);
  for(int i = 0; i < N; i++) {
    AddCostFlowEdge(g, i, i + 1, inf - need[i], 0);
  }
  struct Vol {
    int s, t, c;
  };
  Vec<Vol> vols(M);
  for(int i = 0; i < M; i++) {
    in >> vols[i].s >> vols[i].t >> vols[i].c;
    AddCostFlowEdge(g, vols[i].s - 1, vols[i].t, inf, vols[i].c);
  }
  var flow = MinCostFlowDijkstra(g, id_src(), id_dst(), inf);
  var cost = flow[1];
  Assert(flow[0] == inf);
  out << cost << '\n';
}

void SolveMulti(IStream &in, OStream &out) {
  //std::ifstream input("in");
  int num_of_input = 1;
  //in >> num_of_input;
  for (int i = 0; i < num_of_input; i++) {
    //SolveOne(i + 1, input, out);
	SolveOne(i + 1, in, out);
  }
}