#pragma once
#include "common.cpp"
using namespace dalt;
#include "modint.cpp"
using Mi = ModInt998244353;
#include "combination.cpp"
void SolveOne(int test_id, IStream &in, OStream &out) {
  int R, G, B, K;
  in >> R >> G >> B >> K;
  R -= K;
  G -= K;
  int N = R + G + B + K;
  math::Combination<Mi> comb(N + 1);
  Mi ans = 0;
  for(int i = 0; i <= N && i + i <= N && R - i >= 0 && G - i >= 0; i++) {
    Mi contrib = comb.combination(N - i, i);
    //N - i - i
    //R - i
    //G - i
    //B
    //K
    contrib *= comb.fact[N - i - i];
    contrib *= comb.inv_fact[R - i];
    contrib *= comb.inv_fact[G - i];
    contrib *= comb.inv_fact[B];
    contrib *= comb.inv_fact[K];

    if(i & 1) {
      contrib = -contrib;
    }
    ans += contrib;
  }

  out << ans << '\n';
}

void SolveMulti(IStream &in, OStream &out) {
  //std::ifstream input("in");
  int num_of_input = 1;
  //in >> num_of_input;
  for (int i = 0; i < num_of_input; i++) {
    //SolveOne(i + 1, input, out);
	SolveOne(i + 1, in, out);
  }
}