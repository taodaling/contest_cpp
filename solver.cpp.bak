#pragma once
#include "common.cpp"
using namespace dalt;
#include "modint.cpp"
using Mi = ModInt998244353;
#include "linear_recurrence.cpp"
using namespace poly;
#include "ntt.cpp"
#include "function.cpp"
using Conv = NTTConv<Mi>;
using Poly = Polynomial<Conv>;
void SolveOne(IStream &in, OStream &out) {
  i32 d;
  i64 k;
  in >> d >> k;
  Vec<Mi> a(d);
  Vec<Mi> c(d + 1);
  for (int i = 0; i < d; i++) {
    in >> a[i];
  }
  for (int i = 1; i <= d; i++) {
    in >> c[i]; 
    c[i] =  - c[i];
  }
  c[0] = Mi(1);
  Mi res = KthTermOfLinearRecurrence<Poly>(60, ReverseIndexer(60, BinaryIndexer(k)), 
      c, a);
  out << res << '\n';
}

void SolveMulti(IStream &in, OStream &out) {
  int num_of_input = 1;
  for (int i = 0; i < num_of_input; i++) {
    SolveOne(in, out);
  }
}