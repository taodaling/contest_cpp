#pragma once
#include "common.cpp"
using namespace dalt;
#include "modint.cpp"
using Mi = ModInt1000000007;
void SolveOne(int test_id, IStream &in, OStream &out) {
  int N, K;
  in >> N >> K;
  Vec<Mi> dp(K + 1);
  dp[0] = 1;
  for(int i = 0; i < N; i++) {
    Debug(i);
    Debug(dp);
    Vec<Mi> next(K + 1);
    auto add_raw = [&](int i, Mi x) {
      if(i >= 0 && i <= K) {
        next[i] += x;
      }
    };
    auto add = [&](int l, int r, Mi x) {
      l = Max(0, l);
      r = Min(K, r);
      if(r < l) {
        return;
      }
      add_raw(l, x);
      add_raw(r + 1, -x);
    };
    for(int j = 0; j <= K; j++) {
      add(j, j + i, dp[j]);
    }
    for(int j = 1; j <= K; j++) {
      next[j] += next[j - 1];
    }
    dp = Move(next);
  }
  Debug(N);
  Debug(dp);
  Mi ans = 0;
  for(int i = K; i >= 0; i -= 2) {
    ans += dp[i];
  }
  out << ans;
}

void SolveMulti(IStream &in, OStream &out) {
  //std::ifstream input("in");
  int num_of_input = 1;
  //in >> num_of_input;
  for (int i = 0; i < num_of_input; i++) {
    //SolveOne(i + 1, input, out);
	SolveOne(i + 1, in, out);
  }
}