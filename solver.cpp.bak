#pragma once
#include "common.cpp"
using namespace dalt;
#include "bigint.cpp"
void SolveOne(int test_id, IStream &in, OStream &out) {
  int N;
  in >> N;
  using Bi = external::bigint::BigInt;
  var get_dp = [&](int N) {
    MDVec<Bi, 4> dp(N + 1,
                    MDVec<Bi, 3>(N + 1, MDVec<Bi, 2>(N + 1, Vec<Bi>(3))));
    dp[0][0][0][0] = 1;
    for(int i = 0; i <= N; i++) {
      for(int j = 0; j <= N; j++) {
        for(int k = 0; k <= N; k++) {
          for(int t = 0; t < 3; t++) {
            var cnt = dp[i][j][k][t];
            if(i + 1 <= N && t != 0) {
              dp[i + 1][j][k][0] += cnt;
            }
            if(j + 1 <= N && t != 1) {
              dp[i][j + 1][k][1] += cnt;
            }
            if(k + 1 <= N && t != 2) {
              dp[i][j][k + 1][2] += cnt;
            }
          }
        }
      }
    }
    return dp[N][N][N][0];
  };
  var ans = get_dp(N);
  
  Bi res = ans;
  Debug(res);
  for(int i = 1; i <= N; i++) {
    res *= i;
    res *= i;
    if(i != N) {
      res *= i;
    } 
    Debug(i);
    Debug(res);
  }
  res /= 2;
  out << res;
}

void SolveMulti(IStream &in, OStream &out) {
  //std::ifstream input("in");
  int num_of_input = 1;
  //in >> num_of_input;
  for (int i = 0; i < num_of_input; i++) {
    //SolveOne(i + 1, input, out);
	SolveOne(i + 1, in, out);
  }
}