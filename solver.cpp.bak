#pragma once
#include "common.cpp"
using namespace dalt;
#include "math.cpp"
#include "prefixsum.cpp"
#include "ad-hoc/connected_component_count.cpp"
void SolveOne(int test_id, IStream &in, OStream &out) {
  int N, M;
  in >> N >> M;
  Vec<Vec<int>> mat(N, Vec<int>(M));
  in >> mat;

  int min = 300;
  int max = 0;
  for(var &row : mat) {
    for(var x : row) {
      Chmin(min, x);
      Chmax(max, x);
    }
  }

  PrefixSum<int, 2> ps(mat);
  
  i64 ans = 0;
  for(int minAllow = min; minAllow <= max; minAllow++) {
    Debug(minAllow);
    Vec<Vec<int>> upBlock(N + 1, Vec<int>(M));
    for(int i = 0; i < M; i++) {
      upBlock[N][i] = N - 1;
    }
    for(int j = 0; j < M; j++) {
      for(int i = N - 1; i >= 0; i--) {
        if(mat[i][j] < minAllow) {
          upBlock[i][j] = i - 1;
        } else {
          upBlock[i][j] = upBlock[i + 1][j];
        }
      }
    }

    i64 maxSum = 0;    
    for(int b = 0; b < N; b++) {
      Debug(b);
      Vec<Vec<int>> reg(N);
      int t;
      adhoc::ConnectedComponentCount cc(M, [&](int l, int r) {
        Chmax(maxSum, ps.query(b, t, l, r));
      });
      for(int c = 0; c < M; c++) {
        if(upBlock[b][c] >= b) {
          reg[upBlock[b][c]].push_back(c);
        }
      }
      for(t = N - 1; t >= b; t--) {
        for(var x : reg[t]) {
          cc.insert(x);
        }
      }
    }

    Chmax(ans, maxSum * minAllow);
  }

  out << ans;
}

void SolveMulti(IStream &in, OStream &out) {
  //std::ifstream input("in");
  int num_of_input = 1;
  //in >> num_of_input;
  for (int i = 0; i < num_of_input; i++) {
    //SolveOne(i + 1, input, out);
	SolveOne(i + 1, in, out);
  }
}