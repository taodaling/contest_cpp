#pragma once
#include "common.cpp"
using namespace dalt;
#include "math.cpp"
void SolveOne(int test_id, IStream &in, OStream &out) {
  int N;
  in >> N;
  Vec<int> A(N);
  in >> A;
  A -= 1;
  int M = *MaxElement(All(A));
  Vec<Vec<int>> next(N + 1, Vec<int>(M + 1, N));
  for (int i = N - 1; i >= 0; i--) {
    next[i] = next[i + 1];
    next[i][A[i]] = i;
  }
  MDVec<int, 4> dp_mem(
      N, MDVec<int, 3>(N, MDVec<int, 2>(M + 1, Vec<int>(M + 1, -1))));
  var dp = [&](var &dp, int l, int r, int h, int b) {
    if (l > r || b > h) {
      return 0;
    }

    var &ans = dp_mem[l][r][h][b];
    if (ans == -1) {
      ans = dp(dp, l, r, h - 1, b);

      for (int i = l; i <= r; i++) {
        if (A[i] == h) {
          for (int k = b; k <= h; k++) {
            Chmax(ans, dp(dp, l, i - 1, k, b) + dp(dp, i + 1, r, h, k) + 1);
          }
        }
      }

      // DebugFmtln("dp(%d, %d, %d, %d) = %d", l, r, h, b, ans);
    }
    return ans;
  };
  var ans = dp(dp, 0, N - 1, M, 0);
  out << ans << '\n';
}

void SolveMulti(IStream &in, OStream &out) {
  // std::ifstream input("in");
  int num_of_input = 1;
  // in >> num_of_input;
  for (int i = 0; i < num_of_input; i++) {
    // SolveOne(i + 1, input, out);
    SolveOne(i + 1, in, out);
  }
}